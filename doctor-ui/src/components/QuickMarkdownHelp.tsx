import { Badge } from "@/components/ui/badge";
import { ChevronDown, Copy, Check } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useState } from "react";
import { toast } from "sonner";

interface QuickTip {
  title: string;
  example: string;
  description: string;
}

const QuickMarkdownHelp = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [copiedIndex, setCopiedIndex] = useState<number | null>(null);

  const copyToClipboard = async (text: string, index: number) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedIndex(index);
      toast.success("ƒê√£ sao ch√©p!");
      setTimeout(() => setCopiedIndex(null), 2000);
    } catch {
      toast.error("Kh√¥ng th·ªÉ sao ch√©p");
    }
  };

  const quickTips: QuickTip[] = [
    {
      title: "Ti√™u ƒë·ªÅ",
      example: "# Ti√™u ƒë·ªÅ ch√≠nh\n## Ti√™u ƒë·ªÅ ph·ª•\n### Ti√™u ƒë·ªÅ con",
      description: "S·ª≠ d·ª•ng # ƒë·ªÉ t·∫°o ti√™u ƒë·ªÅ"
    },
    {
      title: "In ƒë·∫≠m/nghi√™ng",
      example: "**VƒÉn b·∫£n in ƒë·∫≠m**\n*VƒÉn b·∫£n in nghi√™ng*",
      description: "L√†m n·ªïi b·∫≠t th√¥ng tin quan tr·ªçng"
    },
    {
      title: "Danh s√°ch",
      example: "- M·ª•c 1\n- M·ª•c 2\n  - M·ª•c con\n\n1. B∆∞·ªõc 1\n2. B∆∞·ªõc 2",
      description: "T·∫°o danh s√°ch c√≥ th·ª© t·ª± v√† kh√¥ng th·ª© t·ª±"
    },
    {
      title: "Tr√≠ch d·∫´n",
      example: "> **L∆∞u √Ω:** Th√¥ng tin quan tr·ªçng\n> c·∫ßn ch√∫ √Ω ƒë·∫∑c bi·ªát",
      description: "L√†m n·ªïi b·∫≠t c·∫£nh b√°o ho·∫∑c ghi ch√∫"
    },
    {
      title: "B·∫£ng",
      example: "| Thu·ªëc | Li·ªÅu | T·∫ßn su·∫•t |\n|-------|------|----------|\n| ARV | 600mg | 1 l·∫ßn/ng√†y |",
      description: "Tr√¨nh b√†y d·ªØ li·ªáu c√≥ c·∫•u tr√∫c"
    },
    {
      title: "M√£/Thu·ªëc",
      example: "Thu·ªëc: `Efavirenz 600mg`\n\n```\nCD4: 350 cells/ŒºL\nViral Load: Undetectable\n```",
      description: "Hi·ªÉn th·ªã t√™n thu·ªëc v√† s·ªë li·ªáu"
    }
  ];

  return (
    <div className="border rounded-lg">
      <Button 
        variant="ghost" 
        size="sm" 
        className="w-full flex items-center justify-between text-xs p-3"
        onClick={() => setIsOpen(!isOpen)}
      >
        <span>üí° M·∫πo vi·∫øt Markdown</span>
        <ChevronDown className={`h-3 w-3 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
      </Button>
      
      {isOpen && (
        <div className="p-3 border-t space-y-2">
          <div className="text-xs text-gray-600 mb-2">
            Nh·∫•n v√†o v√≠ d·ª• ƒë·ªÉ sao ch√©p v√†o clipboard:
          </div>
          {quickTips.map((tip, index) => (
            <div key={index} className="border rounded p-2 bg-gray-50">
              <div className="flex items-center justify-between mb-1">
                <Badge variant="secondary" className="text-xs">
                  {tip.title}
                </Badge>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => copyToClipboard(tip.example, index)}
                  className="h-6 px-2 text-xs"
                >
                  {copiedIndex === index ? (
                    <Check className="h-3 w-3" />
                  ) : (
                    <Copy className="h-3 w-3" />
                  )}
                </Button>
              </div>
              <p className="text-xs text-gray-600 mb-1">{tip.description}</p>
              <pre className="text-xs bg-white p-1 rounded border font-mono whitespace-pre-wrap">
                {tip.example}
              </pre>
            </div>
          ))}
          <div className="text-xs text-center text-gray-500 mt-2 pt-2 border-t">
            Nh·∫•n "H∆∞·ªõng d·∫´n Markdown" ·ªü tr√™n ƒë·ªÉ xem h∆∞·ªõng d·∫´n chi ti·∫øt
          </div>
        </div>
      )}
    </div>
  );
};

export default QuickMarkdownHelp;
